<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CarinaStudio.Core</name>
    </assembly>
    <members>
        <member name="T:CarinaStudio.BaseShareableDisposable`1">
            <summary>
            Base implementation of <see cref="T:CarinaStudio.IShareableDisposable`1"/>.
            </summary>
            <typeparam name="TSelf">Self type.</typeparam>
        </member>
        <member name="T:CarinaStudio.BaseShareableDisposable`1.BaseResourceHolder">
            <summary>
            Base implementation of internal resource holder.
            </summary>
        </member>
        <member name="M:CarinaStudio.BaseShareableDisposable`1.BaseResourceHolder.Release">
            <summary>
            Release internal resources.
            </summary>
        </member>
        <member name="M:CarinaStudio.BaseShareableDisposable`1.#ctor(CarinaStudio.BaseShareableDisposable{`0}.BaseResourceHolder)">
            <summary>
            Initialize new <see cref="T:CarinaStudio.BaseShareableDisposable`1"/> instance.
            </summary>
            <param name="resourceHolder">Resource holder.</param>
        </member>
        <member name="M:CarinaStudio.BaseShareableDisposable`1.Finalize">
            <summary>
            Finalize <see cref="T:CarinaStudio.BaseShareableDisposable`1"/> instance.
            </summary>
        </member>
        <member name="M:CarinaStudio.BaseShareableDisposable`1.Dispose">
            <summary>
            Dispose the instance.
            </summary>
        </member>
        <member name="M:CarinaStudio.BaseShareableDisposable`1.Dispose(System.Boolean)">
            <summary>
            Dispose the instance.
            </summary>
            <param name="disposing">True to dispose managed resources.</param>
        </member>
        <member name="M:CarinaStudio.BaseShareableDisposable`1.GetResourceHolder``1">
            <summary>
            Get resource holder as specific type.
            </summary>
            <typeparam name="T">Specific type of <see cref="T:CarinaStudio.BaseShareableDisposable`1.BaseResourceHolder"/>.</typeparam>
            <returns>Resource holder.</returns>
        </member>
        <member name="P:CarinaStudio.BaseShareableDisposable`1.IsDisposed">
            <summary>
            Check whether instance has been disposed or not.
            </summary>
        </member>
        <member name="M:CarinaStudio.BaseShareableDisposable`1.Share">
            <summary>
            Create a new instance which shares internal resources.
            </summary>
            <returns>New instance which shares internal resources.</returns>
        </member>
        <member name="M:CarinaStudio.BaseShareableDisposable`1.Share(CarinaStudio.BaseShareableDisposable{`0}.BaseResourceHolder)">
            <summary>
            Create a new instance which shares internal resources.
            </summary>
            <param name="resourceHolder">Resource holder.</param>
            <returns>New instance which shares internal resources.</returns>
        </member>
        <member name="M:CarinaStudio.BaseShareableDisposable`1.ThrowIfDisposed">
            <summary>
            Throw <see cref="T:System.ObjectDisposedException"/> if instance has been disposed.
            </summary>
        </member>
        <member name="T:CarinaStudio.Collections.CollectionExtensions">
            <summary>
            Extensions for <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
        </member>
        <member name="M:CarinaStudio.Collections.CollectionExtensions.IsEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Check whether given collection is empty or not.
            </summary>
            <typeparam name="T">Type of element of collection.</typeparam>
            <param name="collection">Collection to check.</param>
            <returns>True if collection is empty.</returns>
        </member>
        <member name="M:CarinaStudio.Collections.CollectionExtensions.IsNotEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Check whether given collection is not empty or not.
            </summary>
            <typeparam name="T">Type of element of collection.</typeparam>
            <param name="collection">Collection to check.</param>
            <returns>True if collection is not empty.</returns>
        </member>
        <member name="M:CarinaStudio.Collections.CollectionExtensions.IsNullOrEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Check whether given collection is null/empty or not.
            </summary>
            <typeparam name="T">Type of element of collection.</typeparam>
            <param name="collection">Collection to check.</param>
            <returns>True if collection is null or empty.</returns>
        </member>
        <member name="T:CarinaStudio.Collections.EnumerableExtensions">
            <summary>
            Extensions for <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
        </member>
        <member name="M:CarinaStudio.Collections.EnumerableExtensions.ContentToString``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Generate readable string represents content in <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <typeparam name="T">Type of element.</typeparam>
            <param name="enumerable"><see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <returns>Readable string represents content.</returns>
        </member>
        <member name="T:CarinaStudio.Collections.ListExtensions">
            <summary>
            Extensions for <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
        </member>
        <member name="M:CarinaStudio.Collections.ListExtensions.BinarySearch``1(System.Collections.Generic.IList{``0},``0,System.Collections.Generic.IComparer{``0})">
            <summary>
            Find given element by binary-search.
            </summary>
            <typeparam name="T">Type of element.</typeparam>
            <param name="list">List to find element.</param>
            <param name="element">Element to be found.</param>
            <param name="comparer"><see cref="T:System.Collections.Generic.IComparer`1"/> to compare elements.</param>
            <returns>Index of found element, or bitwise complement of index of proper position to put element.</returns>
        </member>
        <member name="M:CarinaStudio.Collections.ListExtensions.BinarySearch``1(System.Collections.Generic.IList{``0},``0,System.Comparison{``0})">
            <summary>
            Find given element by binary-search.
            </summary>
            <typeparam name="T">Type of element.</typeparam>
            <param name="list">List to find element.</param>
            <param name="element">Element to be found.</param>
            <param name="comparison">Comparison function.</param>
            <returns>Index of found element, or bitwise complement of index of proper position to put element.</returns>
        </member>
        <member name="M:CarinaStudio.Collections.ListExtensions.BinarySearch``1(System.Collections.Generic.IList{``0},``0)">
            <summary>
            Find given element by binary-search.
            </summary>
            <typeparam name="T">Type of element.</typeparam>
            <param name="list">List to find element.</param>
            <param name="element">Element to be found.</param>
            <returns>Index of found element, or bitwise complement of index of proper position to put element.</returns>
        </member>
        <member name="T:CarinaStudio.DisposableExtensions">
            <summary>
            Extensions for <see cref="T:System.IDisposable"/>.
            </summary>
        </member>
        <member name="M:CarinaStudio.DisposableExtensions.DisposeAndReturnNull``1(``0)">
            <summary>
            Call <see cref="M:System.IDisposable.Dispose"/> and return null.
            </summary>
            <typeparam name="T">Type which implements <see cref="T:System.IDisposable"/>.</typeparam>
            <param name="disposable"><see cref="M:System.IDisposable.Dispose"/>.</param>
            <returns>Null.</returns>
        </member>
        <member name="M:CarinaStudio.DisposableExtensions.Exchange``2(``0,System.Func{``1})">
            <summary>
            Exhange the source <see cref="T:System.IDisposable"/> with another one.
            </summary>
            <typeparam name="T">Type of source <see cref="T:System.IDisposable"/>.</typeparam>
            <typeparam name="R">Type of result <see cref="T:System.IDisposable"/>.</typeparam>
            <param name="source">Source <see cref="T:System.IDisposable"/>.</param>
            <param name="func">Exchanging function.</param>
            <returns>Exchanged <see cref="T:System.IDisposable"/>.</returns>
        </member>
        <member name="M:CarinaStudio.DisposableExtensions.Exchange``2(``0,System.Func{``0,``1})">
            <summary>
            Exhange the source <see cref="T:System.IDisposable"/> with another one.
            </summary>
            <typeparam name="T">Type of source <see cref="T:System.IDisposable"/>.</typeparam>
            <typeparam name="R">Type of result <see cref="T:System.IDisposable"/>.</typeparam>
            <param name="source">Source <see cref="T:System.IDisposable"/>.</param>
            <param name="func">Exchanging function.</param>
            <returns>Exchanged <see cref="T:System.IDisposable"/>.</returns>
        </member>
        <member name="M:CarinaStudio.DisposableExtensions.Use``2(``0,System.Func{``0,``1})">
            <summary>
            Use the given <see cref="T:System.IDisposable"/> to generate value then dispose it before returning from method.
            </summary>
            <typeparam name="T">Type which implements <see cref="T:System.IDisposable"/>.</typeparam>
            <typeparam name="R">Type of generated value.</typeparam>
            <param name="disposable"><see cref="T:System.IDisposable"/>.</param>
            <param name="func">Using function.</param>
            <returns>Generated value.</returns>
        </member>
        <member name="T:CarinaStudio.IShareableDisposable`1">
            <summary>
            <see cref="T:System.IDisposable"/> which allow sharing internal resources. Internal resources will be disposed only when all shared instances are disposed.
            </summary>
            <typeparam name="TSelf">Self type.</typeparam>
        </member>
        <member name="M:CarinaStudio.IShareableDisposable`1.Share">
            <summary>
            Create a new instance which shares internal resources.
            </summary>
            <returns>New instance which shares internal resources.</returns>
        </member>
        <member name="T:CarinaStudio.ObjectExtensions">
            <summary>
            Extensions for all types.
            </summary>
        </member>
        <member name="M:CarinaStudio.ObjectExtensions.Also``1(``0,System.Action{``0})">
            <summary>
            Perform action on the given value, and return it.
            </summary>
            <typeparam name="T">Type of value.</typeparam>
            <param name="value">Given value.</param>
            <param name="action">Action to perform on <paramref name="value"/>.</param>
            <returns>Value which is same as <paramref name="value"/>.</returns>
        </member>
        <member name="M:CarinaStudio.ObjectExtensions.AsNonNull``1(``0)">
            <summary>
            Treat given nullable value as non-null value, or throw <see cref="T:System.NullReferenceException"/>.
            </summary>
            <typeparam name="T">Type of value.</typeparam>
            <param name="obj">Given nullable value.</param>
            <returns>Non-null value.</returns>
        </member>
        <member name="M:CarinaStudio.ObjectExtensions.Let``1(``0,System.Action{``0})">
            <summary>
            Perform action on the given value.
            </summary>
            <typeparam name="T">Type of given value.</typeparam>
            <param name="value">Given value.</param>
            <param name="action">Action to perform on <paramref name="value"/>.</param>
        </member>
        <member name="M:CarinaStudio.ObjectExtensions.Let``2(``0,System.Func{``0,``1})">
            <summary>
            Perform action on the given value, and return a custom value.
            </summary>
            <typeparam name="T">Type of given value.</typeparam>
            <typeparam name="R">Type of return value.</typeparam>
            <param name="value">Given value.</param>
            <param name="action">Action to perform on <paramref name="value"/>.</param>
            <returns>Custom return value.</returns>
        </member>
        <member name="T:CarinaStudio.Threading.ISynchronizable">
            <summary>
            Object which relates to specific <see cref="P:CarinaStudio.Threading.ISynchronizable.SynchronizationContext"/>.
            </summary>
        </member>
        <member name="P:CarinaStudio.Threading.ISynchronizable.SynchronizationContext">
            <summary>
            Get <see cref="P:CarinaStudio.Threading.ISynchronizable.SynchronizationContext"/> which the instance relates to.
            </summary>
        </member>
        <member name="T:CarinaStudio.Threading.ScheduledAction">
            <summary>
            Scheduled action which will be performed by specific <see cref="P:CarinaStudio.Threading.ScheduledAction.SynchronizationContext"/>. This is a thread-safe class.
            </summary>
        </member>
        <member name="M:CarinaStudio.Threading.ScheduledAction.#ctor(System.Threading.SynchronizationContext,System.Action)">
            <summary>
            Initialize new <see cref="T:CarinaStudio.Threading.ScheduledAction"/> instance.
            </summary>
            <param name="synchronizationContext"><see cref="P:CarinaStudio.Threading.ScheduledAction.SynchronizationContext"/> to perform action.</param>
            <param name="action">Action.</param>
        </member>
        <member name="M:CarinaStudio.Threading.ScheduledAction.#ctor(CarinaStudio.Threading.ISynchronizable,System.Action)">
            <summary>
            Initialize new <see cref="T:CarinaStudio.Threading.ScheduledAction"/> instance.
            </summary>
            <param name="synchronizable"><see cref="T:CarinaStudio.Threading.ISynchronizable"/> to provide <see cref="P:CarinaStudio.Threading.ScheduledAction.SynchronizationContext"/> to perform action.</param>
            <param name="action">Action.</param>
        </member>
        <member name="M:CarinaStudio.Threading.ScheduledAction.#ctor(System.Action)">
            <summary>
            Initialize new <see cref="T:CarinaStudio.Threading.ScheduledAction"/> instance with current <see cref="P:CarinaStudio.Threading.ScheduledAction.SynchronizationContext"/>.
            </summary>
            <param name="action">Action.</param>
        </member>
        <member name="M:CarinaStudio.Threading.ScheduledAction.Cancel">
            <summary>
            Cancel scheduled execution.
            </summary>
            <returns>True if action has been cancelled.</returns>
        </member>
        <member name="M:CarinaStudio.Threading.ScheduledAction.Execute">
            <summary>
            Execute action on current thread immediately. The scheduled execution will be cancelled.
            </summary>
        </member>
        <member name="M:CarinaStudio.Threading.ScheduledAction.ExecuteIfScheduled">
            <summary>
            Execute action on current thread immediately if execution has been scheduled. The scheduled execution will be cancelled.
            </summary>
            <returns>True if action has been executed.</returns>
        </member>
        <member name="P:CarinaStudio.Threading.ScheduledAction.IsScheduled">
            <summary>
            Check whether execution has been scheduled or not.
            </summary>
        </member>
        <member name="M:CarinaStudio.Threading.ScheduledAction.Reschedule(System.Int32)">
            <summary>
            Reschedule execution. It will replace the previous scheduling.
            </summary>
            <param name="delayMillis">Delay time in milliseconds.</param>
        </member>
        <member name="M:CarinaStudio.Threading.ScheduledAction.Schedule(System.Int32)">
            <summary>
            Schedule execution. It won't be scheduled again if execution is already scheduled.
            </summary>
            <param name="delayMillis">Delay time in milliseconds.</param>
        </member>
        <member name="P:CarinaStudio.Threading.ScheduledAction.SynchronizationContext">
            <summary>
            <see cref="P:CarinaStudio.Threading.ScheduledAction.SynchronizationContext"/> to perform action.
            </summary>
        </member>
        <member name="T:CarinaStudio.Threading.SynchronizationContextExtensions">
            <summary>
            Extensions for <see cref="T:System.Threading.SynchronizationContext"/>.
            </summary>
        </member>
        <member name="M:CarinaStudio.Threading.SynchronizationContextExtensions.CancelDelayed(System.Threading.SynchronizationContext,System.Object)">
            <summary>
            Cancel posted delayed call-back.
            </summary>
            <param name="synchronizationContext"><see cref="T:System.Threading.SynchronizationContext"/>.</param>
            <param name="token">Token returned from <see cref="M:CarinaStudio.Threading.SynchronizationContextExtensions.PostDelayed(System.Threading.SynchronizationContext,System.Threading.SendOrPostCallback,System.Object,System.Int32)"/>.</param>
            <returns>True if call-back cancelled successfully.</returns>
        </member>
        <member name="M:CarinaStudio.Threading.SynchronizationContextExtensions.Post(System.Threading.SynchronizationContext,System.Action)">
            <summary>
            Post call-back.
            </summary>
            <param name="synchronizationContext"><see cref="T:System.Threading.SynchronizationContext"/>.</param>
            <param name="callback">Call-back.</param>
        </member>
        <member name="M:CarinaStudio.Threading.SynchronizationContextExtensions.PostDelayed(System.Threading.SynchronizationContext,System.Action,System.Int32)">
            <summary>
            Post delayed call-back.
            </summary>
            <param name="synchronizationContext"><see cref="T:System.Threading.SynchronizationContext"/>.</param>
            <param name="callback">Call-back.</param>
            <param name="delayMillis">Delayed time in milliseconds.</param>
            <returns>Token of posted delayed call-back.</returns>
        </member>
        <member name="M:CarinaStudio.Threading.SynchronizationContextExtensions.PostDelayed(System.Threading.SynchronizationContext,System.Threading.SendOrPostCallback,System.Object,System.Int32)">
            <summary>
            Post delayed call-back.
            </summary>
            <param name="synchronizationContext"><see cref="T:System.Threading.SynchronizationContext"/>.</param>
            <param name="callback">Call-back.</param>
            <param name="state">Custom state pass to call-back.</param>
            <param name="delayMillis">Delayed time in milliseconds.</param>
            <returns>Token of posted delayed call-back.</returns>
        </member>
        <member name="M:CarinaStudio.Threading.SynchronizationContextExtensions.Send(System.Threading.SynchronizationContext,System.Action)">
            <summary>
            Call given call-back synchronously.
            </summary>
            <param name="synchronizationContext"><see cref="T:System.Threading.SynchronizationContext"/>.</param>
            <param name="callback">Call-back.</param>
        </member>
    </members>
</doc>
